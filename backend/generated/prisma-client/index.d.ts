// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  actor: (where?: ActorWhereInput) => Promise<boolean>;
  celda: (where?: CeldaWhereInput) => Promise<boolean>;
  estado: (where?: EstadoWhereInput) => Promise<boolean>;
  matriz: (where?: MatrizWhereInput) => Promise<boolean>;
  tema: (where?: TemaWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  actor: (where: ActorWhereUniqueInput) => ActorNullablePromise;
  actors: (args?: {
    where?: ActorWhereInput;
    orderBy?: ActorOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Actor>;
  actorsConnection: (args?: {
    where?: ActorWhereInput;
    orderBy?: ActorOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ActorConnectionPromise;
  celda: (where: CeldaWhereUniqueInput) => CeldaNullablePromise;
  celdas: (args?: {
    where?: CeldaWhereInput;
    orderBy?: CeldaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Celda>;
  celdasConnection: (args?: {
    where?: CeldaWhereInput;
    orderBy?: CeldaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CeldaConnectionPromise;
  estado: (where: EstadoWhereUniqueInput) => EstadoNullablePromise;
  estadoes: (args?: {
    where?: EstadoWhereInput;
    orderBy?: EstadoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Estado>;
  estadoesConnection: (args?: {
    where?: EstadoWhereInput;
    orderBy?: EstadoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => EstadoConnectionPromise;
  matriz: (where: MatrizWhereUniqueInput) => MatrizNullablePromise;
  matrizes: (args?: {
    where?: MatrizWhereInput;
    orderBy?: MatrizOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Matriz>;
  matrizesConnection: (args?: {
    where?: MatrizWhereInput;
    orderBy?: MatrizOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MatrizConnectionPromise;
  tema: (where: TemaWhereUniqueInput) => TemaNullablePromise;
  temas: (args?: {
    where?: TemaWhereInput;
    orderBy?: TemaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Tema>;
  temasConnection: (args?: {
    where?: TemaWhereInput;
    orderBy?: TemaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TemaConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createActor: (data: ActorCreateInput) => ActorPromise;
  updateActor: (args: {
    data: ActorUpdateInput;
    where: ActorWhereUniqueInput;
  }) => ActorPromise;
  updateManyActors: (args: {
    data: ActorUpdateManyMutationInput;
    where?: ActorWhereInput;
  }) => BatchPayloadPromise;
  upsertActor: (args: {
    where: ActorWhereUniqueInput;
    create: ActorCreateInput;
    update: ActorUpdateInput;
  }) => ActorPromise;
  deleteActor: (where: ActorWhereUniqueInput) => ActorPromise;
  deleteManyActors: (where?: ActorWhereInput) => BatchPayloadPromise;
  createCelda: (data: CeldaCreateInput) => CeldaPromise;
  updateCelda: (args: {
    data: CeldaUpdateInput;
    where: CeldaWhereUniqueInput;
  }) => CeldaPromise;
  updateManyCeldas: (args: {
    data: CeldaUpdateManyMutationInput;
    where?: CeldaWhereInput;
  }) => BatchPayloadPromise;
  upsertCelda: (args: {
    where: CeldaWhereUniqueInput;
    create: CeldaCreateInput;
    update: CeldaUpdateInput;
  }) => CeldaPromise;
  deleteCelda: (where: CeldaWhereUniqueInput) => CeldaPromise;
  deleteManyCeldas: (where?: CeldaWhereInput) => BatchPayloadPromise;
  createEstado: (data: EstadoCreateInput) => EstadoPromise;
  updateEstado: (args: {
    data: EstadoUpdateInput;
    where: EstadoWhereUniqueInput;
  }) => EstadoPromise;
  updateManyEstadoes: (args: {
    data: EstadoUpdateManyMutationInput;
    where?: EstadoWhereInput;
  }) => BatchPayloadPromise;
  upsertEstado: (args: {
    where: EstadoWhereUniqueInput;
    create: EstadoCreateInput;
    update: EstadoUpdateInput;
  }) => EstadoPromise;
  deleteEstado: (where: EstadoWhereUniqueInput) => EstadoPromise;
  deleteManyEstadoes: (where?: EstadoWhereInput) => BatchPayloadPromise;
  createMatriz: (data: MatrizCreateInput) => MatrizPromise;
  updateMatriz: (args: {
    data: MatrizUpdateInput;
    where: MatrizWhereUniqueInput;
  }) => MatrizPromise;
  upsertMatriz: (args: {
    where: MatrizWhereUniqueInput;
    create: MatrizCreateInput;
    update: MatrizUpdateInput;
  }) => MatrizPromise;
  deleteMatriz: (where: MatrizWhereUniqueInput) => MatrizPromise;
  deleteManyMatrizes: (where?: MatrizWhereInput) => BatchPayloadPromise;
  createTema: (data: TemaCreateInput) => TemaPromise;
  updateTema: (args: {
    data: TemaUpdateInput;
    where: TemaWhereUniqueInput;
  }) => TemaPromise;
  updateManyTemas: (args: {
    data: TemaUpdateManyMutationInput;
    where?: TemaWhereInput;
  }) => BatchPayloadPromise;
  upsertTema: (args: {
    where: TemaWhereUniqueInput;
    create: TemaCreateInput;
    update: TemaUpdateInput;
  }) => TemaPromise;
  deleteTema: (where: TemaWhereUniqueInput) => TemaPromise;
  deleteManyTemas: (where?: TemaWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  actor: (
    where?: ActorSubscriptionWhereInput
  ) => ActorSubscriptionPayloadSubscription;
  celda: (
    where?: CeldaSubscriptionWhereInput
  ) => CeldaSubscriptionPayloadSubscription;
  estado: (
    where?: EstadoSubscriptionWhereInput
  ) => EstadoSubscriptionPayloadSubscription;
  matriz: (
    where?: MatrizSubscriptionWhereInput
  ) => MatrizSubscriptionPayloadSubscription;
  tema: (
    where?: TemaSubscriptionWhereInput
  ) => TemaSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ActorOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "name_ASC"
  | "name_DESC"
  | "prioridad_ASC"
  | "prioridad_DESC"
  | "coments_ASC"
  | "coments_DESC"
  | "parent_ASC"
  | "parent_DESC";

export type CeldaOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "prioridad_ASC"
  | "prioridad_DESC"
  | "tiempo_ASC"
  | "tiempo_DESC"
  | "coment_ASC"
  | "coment_DESC";

export type TemaOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "name_ASC"
  | "name_DESC"
  | "prioridad_ASC"
  | "prioridad_DESC"
  | "coments_ASC"
  | "coments_DESC"
  | "parent_ASC"
  | "parent_DESC";

export type EstadoOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "NumActor_ASC"
  | "NumActor_DESC"
  | "NumTemas_ASC"
  | "NumTemas_DESC";

export type MatrizOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput = "id_ASC" | "id_DESC" | "name_ASC" | "name_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type ActorWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface ActorWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  prioridad?: Maybe<Int>;
  prioridad_not?: Maybe<Int>;
  prioridad_in?: Maybe<Int[] | Int>;
  prioridad_not_in?: Maybe<Int[] | Int>;
  prioridad_lt?: Maybe<Int>;
  prioridad_lte?: Maybe<Int>;
  prioridad_gt?: Maybe<Int>;
  prioridad_gte?: Maybe<Int>;
  coments?: Maybe<String>;
  coments_not?: Maybe<String>;
  coments_in?: Maybe<String[] | String>;
  coments_not_in?: Maybe<String[] | String>;
  coments_lt?: Maybe<String>;
  coments_lte?: Maybe<String>;
  coments_gt?: Maybe<String>;
  coments_gte?: Maybe<String>;
  coments_contains?: Maybe<String>;
  coments_not_contains?: Maybe<String>;
  coments_starts_with?: Maybe<String>;
  coments_not_starts_with?: Maybe<String>;
  coments_ends_with?: Maybe<String>;
  coments_not_ends_with?: Maybe<String>;
  parent?: Maybe<Boolean>;
  parent_not?: Maybe<Boolean>;
  hijos_every?: Maybe<ActorWhereInput>;
  hijos_some?: Maybe<ActorWhereInput>;
  hijos_none?: Maybe<ActorWhereInput>;
  celdas_every?: Maybe<CeldaWhereInput>;
  celdas_some?: Maybe<CeldaWhereInput>;
  celdas_none?: Maybe<CeldaWhereInput>;
  AND?: Maybe<ActorWhereInput[] | ActorWhereInput>;
  OR?: Maybe<ActorWhereInput[] | ActorWhereInput>;
  NOT?: Maybe<ActorWhereInput[] | ActorWhereInput>;
}

export interface CeldaWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  TemaParent?: Maybe<TemaWhereInput>;
  ActorParent?: Maybe<ActorWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  prioridad?: Maybe<Int>;
  prioridad_not?: Maybe<Int>;
  prioridad_in?: Maybe<Int[] | Int>;
  prioridad_not_in?: Maybe<Int[] | Int>;
  prioridad_lt?: Maybe<Int>;
  prioridad_lte?: Maybe<Int>;
  prioridad_gt?: Maybe<Int>;
  prioridad_gte?: Maybe<Int>;
  tiempo?: Maybe<Int>;
  tiempo_not?: Maybe<Int>;
  tiempo_in?: Maybe<Int[] | Int>;
  tiempo_not_in?: Maybe<Int[] | Int>;
  tiempo_lt?: Maybe<Int>;
  tiempo_lte?: Maybe<Int>;
  tiempo_gt?: Maybe<Int>;
  tiempo_gte?: Maybe<Int>;
  coment?: Maybe<String>;
  coment_not?: Maybe<String>;
  coment_in?: Maybe<String[] | String>;
  coment_not_in?: Maybe<String[] | String>;
  coment_lt?: Maybe<String>;
  coment_lte?: Maybe<String>;
  coment_gt?: Maybe<String>;
  coment_gte?: Maybe<String>;
  coment_contains?: Maybe<String>;
  coment_not_contains?: Maybe<String>;
  coment_starts_with?: Maybe<String>;
  coment_not_starts_with?: Maybe<String>;
  coment_ends_with?: Maybe<String>;
  coment_not_ends_with?: Maybe<String>;
  matriz?: Maybe<MatrizWhereInput>;
  AND?: Maybe<CeldaWhereInput[] | CeldaWhereInput>;
  OR?: Maybe<CeldaWhereInput[] | CeldaWhereInput>;
  NOT?: Maybe<CeldaWhereInput[] | CeldaWhereInput>;
}

export interface TemaWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  prioridad?: Maybe<Int>;
  prioridad_not?: Maybe<Int>;
  prioridad_in?: Maybe<Int[] | Int>;
  prioridad_not_in?: Maybe<Int[] | Int>;
  prioridad_lt?: Maybe<Int>;
  prioridad_lte?: Maybe<Int>;
  prioridad_gt?: Maybe<Int>;
  prioridad_gte?: Maybe<Int>;
  coments?: Maybe<String>;
  coments_not?: Maybe<String>;
  coments_in?: Maybe<String[] | String>;
  coments_not_in?: Maybe<String[] | String>;
  coments_lt?: Maybe<String>;
  coments_lte?: Maybe<String>;
  coments_gt?: Maybe<String>;
  coments_gte?: Maybe<String>;
  coments_contains?: Maybe<String>;
  coments_not_contains?: Maybe<String>;
  coments_starts_with?: Maybe<String>;
  coments_not_starts_with?: Maybe<String>;
  coments_ends_with?: Maybe<String>;
  coments_not_ends_with?: Maybe<String>;
  parent?: Maybe<Boolean>;
  parent_not?: Maybe<Boolean>;
  hijos_every?: Maybe<TemaWhereInput>;
  hijos_some?: Maybe<TemaWhereInput>;
  hijos_none?: Maybe<TemaWhereInput>;
  celdas_every?: Maybe<CeldaWhereInput>;
  celdas_some?: Maybe<CeldaWhereInput>;
  celdas_none?: Maybe<CeldaWhereInput>;
  AND?: Maybe<TemaWhereInput[] | TemaWhereInput>;
  OR?: Maybe<TemaWhereInput[] | TemaWhereInput>;
  NOT?: Maybe<TemaWhereInput[] | TemaWhereInput>;
}

export interface MatrizWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  User?: Maybe<UserWhereInput>;
  Actores_every?: Maybe<ActorWhereInput>;
  Actores_some?: Maybe<ActorWhereInput>;
  Actores_none?: Maybe<ActorWhereInput>;
  Temas_every?: Maybe<TemaWhereInput>;
  Temas_some?: Maybe<TemaWhereInput>;
  Temas_none?: Maybe<TemaWhereInput>;
  Celdas_every?: Maybe<CeldaWhereInput>;
  Celdas_some?: Maybe<CeldaWhereInput>;
  Celdas_none?: Maybe<CeldaWhereInput>;
  AND?: Maybe<MatrizWhereInput[] | MatrizWhereInput>;
  OR?: Maybe<MatrizWhereInput[] | MatrizWhereInput>;
  NOT?: Maybe<MatrizWhereInput[] | MatrizWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export type CeldaWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type EstadoWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface EstadoWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  NumActor?: Maybe<Int>;
  NumActor_not?: Maybe<Int>;
  NumActor_in?: Maybe<Int[] | Int>;
  NumActor_not_in?: Maybe<Int[] | Int>;
  NumActor_lt?: Maybe<Int>;
  NumActor_lte?: Maybe<Int>;
  NumActor_gt?: Maybe<Int>;
  NumActor_gte?: Maybe<Int>;
  NumTemas?: Maybe<Int>;
  NumTemas_not?: Maybe<Int>;
  NumTemas_in?: Maybe<Int[] | Int>;
  NumTemas_not_in?: Maybe<Int[] | Int>;
  NumTemas_lt?: Maybe<Int>;
  NumTemas_lte?: Maybe<Int>;
  NumTemas_gt?: Maybe<Int>;
  NumTemas_gte?: Maybe<Int>;
  AND?: Maybe<EstadoWhereInput[] | EstadoWhereInput>;
  OR?: Maybe<EstadoWhereInput[] | EstadoWhereInput>;
  NOT?: Maybe<EstadoWhereInput[] | EstadoWhereInput>;
}

export type MatrizWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type TemaWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ActorCreateInput {
  name: String;
  prioridad?: Maybe<Int>;
  coments?: Maybe<String>;
  parent?: Maybe<Boolean>;
  hijos?: Maybe<ActorCreateManyInput>;
  celdas?: Maybe<CeldaCreateManyWithoutActorParentInput>;
}

export interface ActorCreateManyInput {
  create?: Maybe<ActorCreateInput[] | ActorCreateInput>;
  connect?: Maybe<ActorWhereUniqueInput[] | ActorWhereUniqueInput>;
}

export interface CeldaCreateManyWithoutActorParentInput {
  create?: Maybe<
    CeldaCreateWithoutActorParentInput[] | CeldaCreateWithoutActorParentInput
  >;
  connect?: Maybe<CeldaWhereUniqueInput[] | CeldaWhereUniqueInput>;
}

export interface CeldaCreateWithoutActorParentInput {
  id?: Maybe<ID_Input>;
  TemaParent: TemaCreateOneWithoutCeldasInput;
  prioridad?: Maybe<Int>;
  tiempo?: Maybe<Int>;
  coment?: Maybe<String>;
  matriz: MatrizCreateOneWithoutCeldasInput;
}

export interface TemaCreateOneWithoutCeldasInput {
  create?: Maybe<TemaCreateWithoutCeldasInput>;
  connect?: Maybe<TemaWhereUniqueInput>;
}

export interface TemaCreateWithoutCeldasInput {
  name: String;
  prioridad?: Maybe<Int>;
  coments?: Maybe<String>;
  parent?: Maybe<Boolean>;
  hijos?: Maybe<TemaCreateManyWithoutHijosInput>;
}

export interface TemaCreateManyWithoutHijosInput {
  create?: Maybe<TemaCreateWithoutHijosInput[] | TemaCreateWithoutHijosInput>;
  connect?: Maybe<TemaWhereUniqueInput[] | TemaWhereUniqueInput>;
}

export interface TemaCreateWithoutHijosInput {
  name: String;
  prioridad?: Maybe<Int>;
  coments?: Maybe<String>;
  parent?: Maybe<Boolean>;
  celdas?: Maybe<CeldaCreateManyWithoutTemaParentInput>;
}

export interface CeldaCreateManyWithoutTemaParentInput {
  create?: Maybe<
    CeldaCreateWithoutTemaParentInput[] | CeldaCreateWithoutTemaParentInput
  >;
  connect?: Maybe<CeldaWhereUniqueInput[] | CeldaWhereUniqueInput>;
}

export interface CeldaCreateWithoutTemaParentInput {
  id?: Maybe<ID_Input>;
  ActorParent: ActorCreateOneWithoutCeldasInput;
  prioridad?: Maybe<Int>;
  tiempo?: Maybe<Int>;
  coment?: Maybe<String>;
  matriz: MatrizCreateOneWithoutCeldasInput;
}

export interface ActorCreateOneWithoutCeldasInput {
  create?: Maybe<ActorCreateWithoutCeldasInput>;
  connect?: Maybe<ActorWhereUniqueInput>;
}

export interface ActorCreateWithoutCeldasInput {
  name: String;
  prioridad?: Maybe<Int>;
  coments?: Maybe<String>;
  parent?: Maybe<Boolean>;
  hijos?: Maybe<ActorCreateManyInput>;
}

export interface MatrizCreateOneWithoutCeldasInput {
  create?: Maybe<MatrizCreateWithoutCeldasInput>;
  connect?: Maybe<MatrizWhereUniqueInput>;
}

export interface MatrizCreateWithoutCeldasInput {
  id?: Maybe<ID_Input>;
  User?: Maybe<UserCreateOneInput>;
  Actores?: Maybe<ActorCreateManyInput>;
  Temas?: Maybe<TemaCreateManyInput>;
}

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
}

export interface TemaCreateManyInput {
  create?: Maybe<TemaCreateInput[] | TemaCreateInput>;
  connect?: Maybe<TemaWhereUniqueInput[] | TemaWhereUniqueInput>;
}

export interface TemaCreateInput {
  name: String;
  prioridad?: Maybe<Int>;
  coments?: Maybe<String>;
  parent?: Maybe<Boolean>;
  hijos?: Maybe<TemaCreateManyWithoutHijosInput>;
  celdas?: Maybe<CeldaCreateManyWithoutTemaParentInput>;
}

export interface ActorUpdateInput {
  name?: Maybe<String>;
  prioridad?: Maybe<Int>;
  coments?: Maybe<String>;
  parent?: Maybe<Boolean>;
  hijos?: Maybe<ActorUpdateManyInput>;
  celdas?: Maybe<CeldaUpdateManyWithoutActorParentInput>;
}

export interface ActorUpdateManyInput {
  create?: Maybe<ActorCreateInput[] | ActorCreateInput>;
  update?: Maybe<
    | ActorUpdateWithWhereUniqueNestedInput[]
    | ActorUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | ActorUpsertWithWhereUniqueNestedInput[]
    | ActorUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<ActorWhereUniqueInput[] | ActorWhereUniqueInput>;
  connect?: Maybe<ActorWhereUniqueInput[] | ActorWhereUniqueInput>;
  set?: Maybe<ActorWhereUniqueInput[] | ActorWhereUniqueInput>;
  disconnect?: Maybe<ActorWhereUniqueInput[] | ActorWhereUniqueInput>;
  deleteMany?: Maybe<ActorScalarWhereInput[] | ActorScalarWhereInput>;
  updateMany?: Maybe<
    ActorUpdateManyWithWhereNestedInput[] | ActorUpdateManyWithWhereNestedInput
  >;
}

export interface ActorUpdateWithWhereUniqueNestedInput {
  where: ActorWhereUniqueInput;
  data: ActorUpdateDataInput;
}

export interface ActorUpdateDataInput {
  name?: Maybe<String>;
  prioridad?: Maybe<Int>;
  coments?: Maybe<String>;
  parent?: Maybe<Boolean>;
  hijos?: Maybe<ActorUpdateManyInput>;
  celdas?: Maybe<CeldaUpdateManyWithoutActorParentInput>;
}

export interface CeldaUpdateManyWithoutActorParentInput {
  create?: Maybe<
    CeldaCreateWithoutActorParentInput[] | CeldaCreateWithoutActorParentInput
  >;
  delete?: Maybe<CeldaWhereUniqueInput[] | CeldaWhereUniqueInput>;
  connect?: Maybe<CeldaWhereUniqueInput[] | CeldaWhereUniqueInput>;
  set?: Maybe<CeldaWhereUniqueInput[] | CeldaWhereUniqueInput>;
  disconnect?: Maybe<CeldaWhereUniqueInput[] | CeldaWhereUniqueInput>;
  update?: Maybe<
    | CeldaUpdateWithWhereUniqueWithoutActorParentInput[]
    | CeldaUpdateWithWhereUniqueWithoutActorParentInput
  >;
  upsert?: Maybe<
    | CeldaUpsertWithWhereUniqueWithoutActorParentInput[]
    | CeldaUpsertWithWhereUniqueWithoutActorParentInput
  >;
  deleteMany?: Maybe<CeldaScalarWhereInput[] | CeldaScalarWhereInput>;
  updateMany?: Maybe<
    CeldaUpdateManyWithWhereNestedInput[] | CeldaUpdateManyWithWhereNestedInput
  >;
}

export interface CeldaUpdateWithWhereUniqueWithoutActorParentInput {
  where: CeldaWhereUniqueInput;
  data: CeldaUpdateWithoutActorParentDataInput;
}

export interface CeldaUpdateWithoutActorParentDataInput {
  TemaParent?: Maybe<TemaUpdateOneRequiredWithoutCeldasInput>;
  prioridad?: Maybe<Int>;
  tiempo?: Maybe<Int>;
  coment?: Maybe<String>;
  matriz?: Maybe<MatrizUpdateOneRequiredWithoutCeldasInput>;
}

export interface TemaUpdateOneRequiredWithoutCeldasInput {
  create?: Maybe<TemaCreateWithoutCeldasInput>;
  update?: Maybe<TemaUpdateWithoutCeldasDataInput>;
  upsert?: Maybe<TemaUpsertWithoutCeldasInput>;
  connect?: Maybe<TemaWhereUniqueInput>;
}

export interface TemaUpdateWithoutCeldasDataInput {
  name?: Maybe<String>;
  prioridad?: Maybe<Int>;
  coments?: Maybe<String>;
  parent?: Maybe<Boolean>;
  hijos?: Maybe<TemaUpdateManyWithoutHijosInput>;
}

export interface TemaUpdateManyWithoutHijosInput {
  create?: Maybe<TemaCreateWithoutHijosInput[] | TemaCreateWithoutHijosInput>;
  delete?: Maybe<TemaWhereUniqueInput[] | TemaWhereUniqueInput>;
  connect?: Maybe<TemaWhereUniqueInput[] | TemaWhereUniqueInput>;
  set?: Maybe<TemaWhereUniqueInput[] | TemaWhereUniqueInput>;
  disconnect?: Maybe<TemaWhereUniqueInput[] | TemaWhereUniqueInput>;
  update?: Maybe<
    | TemaUpdateWithWhereUniqueWithoutHijosInput[]
    | TemaUpdateWithWhereUniqueWithoutHijosInput
  >;
  upsert?: Maybe<
    | TemaUpsertWithWhereUniqueWithoutHijosInput[]
    | TemaUpsertWithWhereUniqueWithoutHijosInput
  >;
  deleteMany?: Maybe<TemaScalarWhereInput[] | TemaScalarWhereInput>;
  updateMany?: Maybe<
    TemaUpdateManyWithWhereNestedInput[] | TemaUpdateManyWithWhereNestedInput
  >;
}

export interface TemaUpdateWithWhereUniqueWithoutHijosInput {
  where: TemaWhereUniqueInput;
  data: TemaUpdateWithoutHijosDataInput;
}

export interface TemaUpdateWithoutHijosDataInput {
  name?: Maybe<String>;
  prioridad?: Maybe<Int>;
  coments?: Maybe<String>;
  parent?: Maybe<Boolean>;
  celdas?: Maybe<CeldaUpdateManyWithoutTemaParentInput>;
}

export interface CeldaUpdateManyWithoutTemaParentInput {
  create?: Maybe<
    CeldaCreateWithoutTemaParentInput[] | CeldaCreateWithoutTemaParentInput
  >;
  delete?: Maybe<CeldaWhereUniqueInput[] | CeldaWhereUniqueInput>;
  connect?: Maybe<CeldaWhereUniqueInput[] | CeldaWhereUniqueInput>;
  set?: Maybe<CeldaWhereUniqueInput[] | CeldaWhereUniqueInput>;
  disconnect?: Maybe<CeldaWhereUniqueInput[] | CeldaWhereUniqueInput>;
  update?: Maybe<
    | CeldaUpdateWithWhereUniqueWithoutTemaParentInput[]
    | CeldaUpdateWithWhereUniqueWithoutTemaParentInput
  >;
  upsert?: Maybe<
    | CeldaUpsertWithWhereUniqueWithoutTemaParentInput[]
    | CeldaUpsertWithWhereUniqueWithoutTemaParentInput
  >;
  deleteMany?: Maybe<CeldaScalarWhereInput[] | CeldaScalarWhereInput>;
  updateMany?: Maybe<
    CeldaUpdateManyWithWhereNestedInput[] | CeldaUpdateManyWithWhereNestedInput
  >;
}

export interface CeldaUpdateWithWhereUniqueWithoutTemaParentInput {
  where: CeldaWhereUniqueInput;
  data: CeldaUpdateWithoutTemaParentDataInput;
}

export interface CeldaUpdateWithoutTemaParentDataInput {
  ActorParent?: Maybe<ActorUpdateOneRequiredWithoutCeldasInput>;
  prioridad?: Maybe<Int>;
  tiempo?: Maybe<Int>;
  coment?: Maybe<String>;
  matriz?: Maybe<MatrizUpdateOneRequiredWithoutCeldasInput>;
}

export interface ActorUpdateOneRequiredWithoutCeldasInput {
  create?: Maybe<ActorCreateWithoutCeldasInput>;
  update?: Maybe<ActorUpdateWithoutCeldasDataInput>;
  upsert?: Maybe<ActorUpsertWithoutCeldasInput>;
  connect?: Maybe<ActorWhereUniqueInput>;
}

export interface ActorUpdateWithoutCeldasDataInput {
  name?: Maybe<String>;
  prioridad?: Maybe<Int>;
  coments?: Maybe<String>;
  parent?: Maybe<Boolean>;
  hijos?: Maybe<ActorUpdateManyInput>;
}

export interface ActorUpsertWithoutCeldasInput {
  update: ActorUpdateWithoutCeldasDataInput;
  create: ActorCreateWithoutCeldasInput;
}

export interface MatrizUpdateOneRequiredWithoutCeldasInput {
  create?: Maybe<MatrizCreateWithoutCeldasInput>;
  update?: Maybe<MatrizUpdateWithoutCeldasDataInput>;
  upsert?: Maybe<MatrizUpsertWithoutCeldasInput>;
  connect?: Maybe<MatrizWhereUniqueInput>;
}

export interface MatrizUpdateWithoutCeldasDataInput {
  User?: Maybe<UserUpdateOneInput>;
  Actores?: Maybe<ActorUpdateManyInput>;
  Temas?: Maybe<TemaUpdateManyInput>;
}

export interface UserUpdateOneInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateDataInput {
  name?: Maybe<String>;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface TemaUpdateManyInput {
  create?: Maybe<TemaCreateInput[] | TemaCreateInput>;
  update?: Maybe<
    | TemaUpdateWithWhereUniqueNestedInput[]
    | TemaUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | TemaUpsertWithWhereUniqueNestedInput[]
    | TemaUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<TemaWhereUniqueInput[] | TemaWhereUniqueInput>;
  connect?: Maybe<TemaWhereUniqueInput[] | TemaWhereUniqueInput>;
  set?: Maybe<TemaWhereUniqueInput[] | TemaWhereUniqueInput>;
  disconnect?: Maybe<TemaWhereUniqueInput[] | TemaWhereUniqueInput>;
  deleteMany?: Maybe<TemaScalarWhereInput[] | TemaScalarWhereInput>;
  updateMany?: Maybe<
    TemaUpdateManyWithWhereNestedInput[] | TemaUpdateManyWithWhereNestedInput
  >;
}

export interface TemaUpdateWithWhereUniqueNestedInput {
  where: TemaWhereUniqueInput;
  data: TemaUpdateDataInput;
}

export interface TemaUpdateDataInput {
  name?: Maybe<String>;
  prioridad?: Maybe<Int>;
  coments?: Maybe<String>;
  parent?: Maybe<Boolean>;
  hijos?: Maybe<TemaUpdateManyWithoutHijosInput>;
  celdas?: Maybe<CeldaUpdateManyWithoutTemaParentInput>;
}

export interface TemaUpsertWithWhereUniqueNestedInput {
  where: TemaWhereUniqueInput;
  update: TemaUpdateDataInput;
  create: TemaCreateInput;
}

export interface TemaScalarWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  prioridad?: Maybe<Int>;
  prioridad_not?: Maybe<Int>;
  prioridad_in?: Maybe<Int[] | Int>;
  prioridad_not_in?: Maybe<Int[] | Int>;
  prioridad_lt?: Maybe<Int>;
  prioridad_lte?: Maybe<Int>;
  prioridad_gt?: Maybe<Int>;
  prioridad_gte?: Maybe<Int>;
  coments?: Maybe<String>;
  coments_not?: Maybe<String>;
  coments_in?: Maybe<String[] | String>;
  coments_not_in?: Maybe<String[] | String>;
  coments_lt?: Maybe<String>;
  coments_lte?: Maybe<String>;
  coments_gt?: Maybe<String>;
  coments_gte?: Maybe<String>;
  coments_contains?: Maybe<String>;
  coments_not_contains?: Maybe<String>;
  coments_starts_with?: Maybe<String>;
  coments_not_starts_with?: Maybe<String>;
  coments_ends_with?: Maybe<String>;
  coments_not_ends_with?: Maybe<String>;
  parent?: Maybe<Boolean>;
  parent_not?: Maybe<Boolean>;
  AND?: Maybe<TemaScalarWhereInput[] | TemaScalarWhereInput>;
  OR?: Maybe<TemaScalarWhereInput[] | TemaScalarWhereInput>;
  NOT?: Maybe<TemaScalarWhereInput[] | TemaScalarWhereInput>;
}

export interface TemaUpdateManyWithWhereNestedInput {
  where: TemaScalarWhereInput;
  data: TemaUpdateManyDataInput;
}

export interface TemaUpdateManyDataInput {
  name?: Maybe<String>;
  prioridad?: Maybe<Int>;
  coments?: Maybe<String>;
  parent?: Maybe<Boolean>;
}

export interface MatrizUpsertWithoutCeldasInput {
  update: MatrizUpdateWithoutCeldasDataInput;
  create: MatrizCreateWithoutCeldasInput;
}

export interface CeldaUpsertWithWhereUniqueWithoutTemaParentInput {
  where: CeldaWhereUniqueInput;
  update: CeldaUpdateWithoutTemaParentDataInput;
  create: CeldaCreateWithoutTemaParentInput;
}

export interface CeldaScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  prioridad?: Maybe<Int>;
  prioridad_not?: Maybe<Int>;
  prioridad_in?: Maybe<Int[] | Int>;
  prioridad_not_in?: Maybe<Int[] | Int>;
  prioridad_lt?: Maybe<Int>;
  prioridad_lte?: Maybe<Int>;
  prioridad_gt?: Maybe<Int>;
  prioridad_gte?: Maybe<Int>;
  tiempo?: Maybe<Int>;
  tiempo_not?: Maybe<Int>;
  tiempo_in?: Maybe<Int[] | Int>;
  tiempo_not_in?: Maybe<Int[] | Int>;
  tiempo_lt?: Maybe<Int>;
  tiempo_lte?: Maybe<Int>;
  tiempo_gt?: Maybe<Int>;
  tiempo_gte?: Maybe<Int>;
  coment?: Maybe<String>;
  coment_not?: Maybe<String>;
  coment_in?: Maybe<String[] | String>;
  coment_not_in?: Maybe<String[] | String>;
  coment_lt?: Maybe<String>;
  coment_lte?: Maybe<String>;
  coment_gt?: Maybe<String>;
  coment_gte?: Maybe<String>;
  coment_contains?: Maybe<String>;
  coment_not_contains?: Maybe<String>;
  coment_starts_with?: Maybe<String>;
  coment_not_starts_with?: Maybe<String>;
  coment_ends_with?: Maybe<String>;
  coment_not_ends_with?: Maybe<String>;
  AND?: Maybe<CeldaScalarWhereInput[] | CeldaScalarWhereInput>;
  OR?: Maybe<CeldaScalarWhereInput[] | CeldaScalarWhereInput>;
  NOT?: Maybe<CeldaScalarWhereInput[] | CeldaScalarWhereInput>;
}

export interface CeldaUpdateManyWithWhereNestedInput {
  where: CeldaScalarWhereInput;
  data: CeldaUpdateManyDataInput;
}

export interface CeldaUpdateManyDataInput {
  prioridad?: Maybe<Int>;
  tiempo?: Maybe<Int>;
  coment?: Maybe<String>;
}

export interface TemaUpsertWithWhereUniqueWithoutHijosInput {
  where: TemaWhereUniqueInput;
  update: TemaUpdateWithoutHijosDataInput;
  create: TemaCreateWithoutHijosInput;
}

export interface TemaUpsertWithoutCeldasInput {
  update: TemaUpdateWithoutCeldasDataInput;
  create: TemaCreateWithoutCeldasInput;
}

export interface CeldaUpsertWithWhereUniqueWithoutActorParentInput {
  where: CeldaWhereUniqueInput;
  update: CeldaUpdateWithoutActorParentDataInput;
  create: CeldaCreateWithoutActorParentInput;
}

export interface ActorUpsertWithWhereUniqueNestedInput {
  where: ActorWhereUniqueInput;
  update: ActorUpdateDataInput;
  create: ActorCreateInput;
}

export interface ActorScalarWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  prioridad?: Maybe<Int>;
  prioridad_not?: Maybe<Int>;
  prioridad_in?: Maybe<Int[] | Int>;
  prioridad_not_in?: Maybe<Int[] | Int>;
  prioridad_lt?: Maybe<Int>;
  prioridad_lte?: Maybe<Int>;
  prioridad_gt?: Maybe<Int>;
  prioridad_gte?: Maybe<Int>;
  coments?: Maybe<String>;
  coments_not?: Maybe<String>;
  coments_in?: Maybe<String[] | String>;
  coments_not_in?: Maybe<String[] | String>;
  coments_lt?: Maybe<String>;
  coments_lte?: Maybe<String>;
  coments_gt?: Maybe<String>;
  coments_gte?: Maybe<String>;
  coments_contains?: Maybe<String>;
  coments_not_contains?: Maybe<String>;
  coments_starts_with?: Maybe<String>;
  coments_not_starts_with?: Maybe<String>;
  coments_ends_with?: Maybe<String>;
  coments_not_ends_with?: Maybe<String>;
  parent?: Maybe<Boolean>;
  parent_not?: Maybe<Boolean>;
  AND?: Maybe<ActorScalarWhereInput[] | ActorScalarWhereInput>;
  OR?: Maybe<ActorScalarWhereInput[] | ActorScalarWhereInput>;
  NOT?: Maybe<ActorScalarWhereInput[] | ActorScalarWhereInput>;
}

export interface ActorUpdateManyWithWhereNestedInput {
  where: ActorScalarWhereInput;
  data: ActorUpdateManyDataInput;
}

export interface ActorUpdateManyDataInput {
  name?: Maybe<String>;
  prioridad?: Maybe<Int>;
  coments?: Maybe<String>;
  parent?: Maybe<Boolean>;
}

export interface ActorUpdateManyMutationInput {
  name?: Maybe<String>;
  prioridad?: Maybe<Int>;
  coments?: Maybe<String>;
  parent?: Maybe<Boolean>;
}

export interface CeldaCreateInput {
  id?: Maybe<ID_Input>;
  TemaParent: TemaCreateOneWithoutCeldasInput;
  ActorParent: ActorCreateOneWithoutCeldasInput;
  prioridad?: Maybe<Int>;
  tiempo?: Maybe<Int>;
  coment?: Maybe<String>;
  matriz: MatrizCreateOneWithoutCeldasInput;
}

export interface CeldaUpdateInput {
  TemaParent?: Maybe<TemaUpdateOneRequiredWithoutCeldasInput>;
  ActorParent?: Maybe<ActorUpdateOneRequiredWithoutCeldasInput>;
  prioridad?: Maybe<Int>;
  tiempo?: Maybe<Int>;
  coment?: Maybe<String>;
  matriz?: Maybe<MatrizUpdateOneRequiredWithoutCeldasInput>;
}

export interface CeldaUpdateManyMutationInput {
  prioridad?: Maybe<Int>;
  tiempo?: Maybe<Int>;
  coment?: Maybe<String>;
}

export interface EstadoCreateInput {
  id?: Maybe<ID_Input>;
  NumActor: Int;
  NumTemas: Int;
}

export interface EstadoUpdateInput {
  NumActor?: Maybe<Int>;
  NumTemas?: Maybe<Int>;
}

export interface EstadoUpdateManyMutationInput {
  NumActor?: Maybe<Int>;
  NumTemas?: Maybe<Int>;
}

export interface MatrizCreateInput {
  id?: Maybe<ID_Input>;
  User?: Maybe<UserCreateOneInput>;
  Actores?: Maybe<ActorCreateManyInput>;
  Temas?: Maybe<TemaCreateManyInput>;
  Celdas?: Maybe<CeldaCreateManyWithoutMatrizInput>;
}

export interface CeldaCreateManyWithoutMatrizInput {
  create?: Maybe<
    CeldaCreateWithoutMatrizInput[] | CeldaCreateWithoutMatrizInput
  >;
  connect?: Maybe<CeldaWhereUniqueInput[] | CeldaWhereUniqueInput>;
}

export interface CeldaCreateWithoutMatrizInput {
  id?: Maybe<ID_Input>;
  TemaParent: TemaCreateOneWithoutCeldasInput;
  ActorParent: ActorCreateOneWithoutCeldasInput;
  prioridad?: Maybe<Int>;
  tiempo?: Maybe<Int>;
  coment?: Maybe<String>;
}

export interface MatrizUpdateInput {
  User?: Maybe<UserUpdateOneInput>;
  Actores?: Maybe<ActorUpdateManyInput>;
  Temas?: Maybe<TemaUpdateManyInput>;
  Celdas?: Maybe<CeldaUpdateManyWithoutMatrizInput>;
}

export interface CeldaUpdateManyWithoutMatrizInput {
  create?: Maybe<
    CeldaCreateWithoutMatrizInput[] | CeldaCreateWithoutMatrizInput
  >;
  delete?: Maybe<CeldaWhereUniqueInput[] | CeldaWhereUniqueInput>;
  connect?: Maybe<CeldaWhereUniqueInput[] | CeldaWhereUniqueInput>;
  set?: Maybe<CeldaWhereUniqueInput[] | CeldaWhereUniqueInput>;
  disconnect?: Maybe<CeldaWhereUniqueInput[] | CeldaWhereUniqueInput>;
  update?: Maybe<
    | CeldaUpdateWithWhereUniqueWithoutMatrizInput[]
    | CeldaUpdateWithWhereUniqueWithoutMatrizInput
  >;
  upsert?: Maybe<
    | CeldaUpsertWithWhereUniqueWithoutMatrizInput[]
    | CeldaUpsertWithWhereUniqueWithoutMatrizInput
  >;
  deleteMany?: Maybe<CeldaScalarWhereInput[] | CeldaScalarWhereInput>;
  updateMany?: Maybe<
    CeldaUpdateManyWithWhereNestedInput[] | CeldaUpdateManyWithWhereNestedInput
  >;
}

export interface CeldaUpdateWithWhereUniqueWithoutMatrizInput {
  where: CeldaWhereUniqueInput;
  data: CeldaUpdateWithoutMatrizDataInput;
}

export interface CeldaUpdateWithoutMatrizDataInput {
  TemaParent?: Maybe<TemaUpdateOneRequiredWithoutCeldasInput>;
  ActorParent?: Maybe<ActorUpdateOneRequiredWithoutCeldasInput>;
  prioridad?: Maybe<Int>;
  tiempo?: Maybe<Int>;
  coment?: Maybe<String>;
}

export interface CeldaUpsertWithWhereUniqueWithoutMatrizInput {
  where: CeldaWhereUniqueInput;
  update: CeldaUpdateWithoutMatrizDataInput;
  create: CeldaCreateWithoutMatrizInput;
}

export interface TemaUpdateInput {
  name?: Maybe<String>;
  prioridad?: Maybe<Int>;
  coments?: Maybe<String>;
  parent?: Maybe<Boolean>;
  hijos?: Maybe<TemaUpdateManyWithoutHijosInput>;
  celdas?: Maybe<CeldaUpdateManyWithoutTemaParentInput>;
}

export interface TemaUpdateManyMutationInput {
  name?: Maybe<String>;
  prioridad?: Maybe<Int>;
  coments?: Maybe<String>;
  parent?: Maybe<Boolean>;
}

export interface UserUpdateInput {
  name?: Maybe<String>;
}

export interface UserUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface ActorSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ActorWhereInput>;
  AND?: Maybe<ActorSubscriptionWhereInput[] | ActorSubscriptionWhereInput>;
  OR?: Maybe<ActorSubscriptionWhereInput[] | ActorSubscriptionWhereInput>;
  NOT?: Maybe<ActorSubscriptionWhereInput[] | ActorSubscriptionWhereInput>;
}

export interface CeldaSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CeldaWhereInput>;
  AND?: Maybe<CeldaSubscriptionWhereInput[] | CeldaSubscriptionWhereInput>;
  OR?: Maybe<CeldaSubscriptionWhereInput[] | CeldaSubscriptionWhereInput>;
  NOT?: Maybe<CeldaSubscriptionWhereInput[] | CeldaSubscriptionWhereInput>;
}

export interface EstadoSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<EstadoWhereInput>;
  AND?: Maybe<EstadoSubscriptionWhereInput[] | EstadoSubscriptionWhereInput>;
  OR?: Maybe<EstadoSubscriptionWhereInput[] | EstadoSubscriptionWhereInput>;
  NOT?: Maybe<EstadoSubscriptionWhereInput[] | EstadoSubscriptionWhereInput>;
}

export interface MatrizSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<MatrizWhereInput>;
  AND?: Maybe<MatrizSubscriptionWhereInput[] | MatrizSubscriptionWhereInput>;
  OR?: Maybe<MatrizSubscriptionWhereInput[] | MatrizSubscriptionWhereInput>;
  NOT?: Maybe<MatrizSubscriptionWhereInput[] | MatrizSubscriptionWhereInput>;
}

export interface TemaSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<TemaWhereInput>;
  AND?: Maybe<TemaSubscriptionWhereInput[] | TemaSubscriptionWhereInput>;
  OR?: Maybe<TemaSubscriptionWhereInput[] | TemaSubscriptionWhereInput>;
  NOT?: Maybe<TemaSubscriptionWhereInput[] | TemaSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Actor {
  id: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
  prioridad?: Int;
  coments?: String;
  parent?: Boolean;
}

export interface ActorPromise extends Promise<Actor>, Fragmentable {
  id: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  prioridad: () => Promise<Int>;
  coments: () => Promise<String>;
  parent: () => Promise<Boolean>;
  hijos: <T = FragmentableArray<Actor>>(args?: {
    where?: ActorWhereInput;
    orderBy?: ActorOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  celdas: <T = FragmentableArray<Celda>>(args?: {
    where?: CeldaWhereInput;
    orderBy?: CeldaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ActorSubscription
  extends Promise<AsyncIterator<Actor>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  prioridad: () => Promise<AsyncIterator<Int>>;
  coments: () => Promise<AsyncIterator<String>>;
  parent: () => Promise<AsyncIterator<Boolean>>;
  hijos: <T = Promise<AsyncIterator<ActorSubscription>>>(args?: {
    where?: ActorWhereInput;
    orderBy?: ActorOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  celdas: <T = Promise<AsyncIterator<CeldaSubscription>>>(args?: {
    where?: CeldaWhereInput;
    orderBy?: CeldaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ActorNullablePromise
  extends Promise<Actor | null>,
    Fragmentable {
  id: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  prioridad: () => Promise<Int>;
  coments: () => Promise<String>;
  parent: () => Promise<Boolean>;
  hijos: <T = FragmentableArray<Actor>>(args?: {
    where?: ActorWhereInput;
    orderBy?: ActorOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  celdas: <T = FragmentableArray<Celda>>(args?: {
    where?: CeldaWhereInput;
    orderBy?: CeldaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Celda {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  prioridad?: Int;
  tiempo?: Int;
  coment?: String;
}

export interface CeldaPromise extends Promise<Celda>, Fragmentable {
  id: () => Promise<ID_Output>;
  TemaParent: <T = TemaPromise>() => T;
  ActorParent: <T = ActorPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  prioridad: () => Promise<Int>;
  tiempo: () => Promise<Int>;
  coment: () => Promise<String>;
  matriz: <T = MatrizPromise>() => T;
}

export interface CeldaSubscription
  extends Promise<AsyncIterator<Celda>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  TemaParent: <T = TemaSubscription>() => T;
  ActorParent: <T = ActorSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  prioridad: () => Promise<AsyncIterator<Int>>;
  tiempo: () => Promise<AsyncIterator<Int>>;
  coment: () => Promise<AsyncIterator<String>>;
  matriz: <T = MatrizSubscription>() => T;
}

export interface CeldaNullablePromise
  extends Promise<Celda | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  TemaParent: <T = TemaPromise>() => T;
  ActorParent: <T = ActorPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  prioridad: () => Promise<Int>;
  tiempo: () => Promise<Int>;
  coment: () => Promise<String>;
  matriz: <T = MatrizPromise>() => T;
}

export interface Tema {
  id: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
  prioridad?: Int;
  coments?: String;
  parent?: Boolean;
}

export interface TemaPromise extends Promise<Tema>, Fragmentable {
  id: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  prioridad: () => Promise<Int>;
  coments: () => Promise<String>;
  parent: () => Promise<Boolean>;
  hijos: <T = FragmentableArray<Tema>>(args?: {
    where?: TemaWhereInput;
    orderBy?: TemaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  celdas: <T = FragmentableArray<Celda>>(args?: {
    where?: CeldaWhereInput;
    orderBy?: CeldaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface TemaSubscription
  extends Promise<AsyncIterator<Tema>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  prioridad: () => Promise<AsyncIterator<Int>>;
  coments: () => Promise<AsyncIterator<String>>;
  parent: () => Promise<AsyncIterator<Boolean>>;
  hijos: <T = Promise<AsyncIterator<TemaSubscription>>>(args?: {
    where?: TemaWhereInput;
    orderBy?: TemaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  celdas: <T = Promise<AsyncIterator<CeldaSubscription>>>(args?: {
    where?: CeldaWhereInput;
    orderBy?: CeldaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface TemaNullablePromise
  extends Promise<Tema | null>,
    Fragmentable {
  id: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  prioridad: () => Promise<Int>;
  coments: () => Promise<String>;
  parent: () => Promise<Boolean>;
  hijos: <T = FragmentableArray<Tema>>(args?: {
    where?: TemaWhereInput;
    orderBy?: TemaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  celdas: <T = FragmentableArray<Celda>>(args?: {
    where?: CeldaWhereInput;
    orderBy?: CeldaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Matriz {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface MatrizPromise extends Promise<Matriz>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  User: <T = UserPromise>() => T;
  Actores: <T = FragmentableArray<Actor>>(args?: {
    where?: ActorWhereInput;
    orderBy?: ActorOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  Temas: <T = FragmentableArray<Tema>>(args?: {
    where?: TemaWhereInput;
    orderBy?: TemaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  Celdas: <T = FragmentableArray<Celda>>(args?: {
    where?: CeldaWhereInput;
    orderBy?: CeldaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface MatrizSubscription
  extends Promise<AsyncIterator<Matriz>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  User: <T = UserSubscription>() => T;
  Actores: <T = Promise<AsyncIterator<ActorSubscription>>>(args?: {
    where?: ActorWhereInput;
    orderBy?: ActorOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  Temas: <T = Promise<AsyncIterator<TemaSubscription>>>(args?: {
    where?: TemaWhereInput;
    orderBy?: TemaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  Celdas: <T = Promise<AsyncIterator<CeldaSubscription>>>(args?: {
    where?: CeldaWhereInput;
    orderBy?: CeldaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface MatrizNullablePromise
  extends Promise<Matriz | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  User: <T = UserPromise>() => T;
  Actores: <T = FragmentableArray<Actor>>(args?: {
    where?: ActorWhereInput;
    orderBy?: ActorOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  Temas: <T = FragmentableArray<Tema>>(args?: {
    where?: TemaWhereInput;
    orderBy?: TemaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  Celdas: <T = FragmentableArray<Celda>>(args?: {
    where?: CeldaWhereInput;
    orderBy?: CeldaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface User {
  id: ID_Output;
  name: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface ActorConnection {
  pageInfo: PageInfo;
  edges: ActorEdge[];
}

export interface ActorConnectionPromise
  extends Promise<ActorConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ActorEdge>>() => T;
  aggregate: <T = AggregateActorPromise>() => T;
}

export interface ActorConnectionSubscription
  extends Promise<AsyncIterator<ActorConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ActorEdgeSubscription>>>() => T;
  aggregate: <T = AggregateActorSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ActorEdge {
  node: Actor;
  cursor: String;
}

export interface ActorEdgePromise extends Promise<ActorEdge>, Fragmentable {
  node: <T = ActorPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ActorEdgeSubscription
  extends Promise<AsyncIterator<ActorEdge>>,
    Fragmentable {
  node: <T = ActorSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateActor {
  count: Int;
}

export interface AggregateActorPromise
  extends Promise<AggregateActor>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateActorSubscription
  extends Promise<AsyncIterator<AggregateActor>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CeldaConnection {
  pageInfo: PageInfo;
  edges: CeldaEdge[];
}

export interface CeldaConnectionPromise
  extends Promise<CeldaConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CeldaEdge>>() => T;
  aggregate: <T = AggregateCeldaPromise>() => T;
}

export interface CeldaConnectionSubscription
  extends Promise<AsyncIterator<CeldaConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CeldaEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCeldaSubscription>() => T;
}

export interface CeldaEdge {
  node: Celda;
  cursor: String;
}

export interface CeldaEdgePromise extends Promise<CeldaEdge>, Fragmentable {
  node: <T = CeldaPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CeldaEdgeSubscription
  extends Promise<AsyncIterator<CeldaEdge>>,
    Fragmentable {
  node: <T = CeldaSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCelda {
  count: Int;
}

export interface AggregateCeldaPromise
  extends Promise<AggregateCelda>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCeldaSubscription
  extends Promise<AsyncIterator<AggregateCelda>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Estado {
  id: ID_Output;
  NumActor: Int;
  NumTemas: Int;
}

export interface EstadoPromise extends Promise<Estado>, Fragmentable {
  id: () => Promise<ID_Output>;
  NumActor: () => Promise<Int>;
  NumTemas: () => Promise<Int>;
}

export interface EstadoSubscription
  extends Promise<AsyncIterator<Estado>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  NumActor: () => Promise<AsyncIterator<Int>>;
  NumTemas: () => Promise<AsyncIterator<Int>>;
}

export interface EstadoNullablePromise
  extends Promise<Estado | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  NumActor: () => Promise<Int>;
  NumTemas: () => Promise<Int>;
}

export interface EstadoConnection {
  pageInfo: PageInfo;
  edges: EstadoEdge[];
}

export interface EstadoConnectionPromise
  extends Promise<EstadoConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<EstadoEdge>>() => T;
  aggregate: <T = AggregateEstadoPromise>() => T;
}

export interface EstadoConnectionSubscription
  extends Promise<AsyncIterator<EstadoConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<EstadoEdgeSubscription>>>() => T;
  aggregate: <T = AggregateEstadoSubscription>() => T;
}

export interface EstadoEdge {
  node: Estado;
  cursor: String;
}

export interface EstadoEdgePromise extends Promise<EstadoEdge>, Fragmentable {
  node: <T = EstadoPromise>() => T;
  cursor: () => Promise<String>;
}

export interface EstadoEdgeSubscription
  extends Promise<AsyncIterator<EstadoEdge>>,
    Fragmentable {
  node: <T = EstadoSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateEstado {
  count: Int;
}

export interface AggregateEstadoPromise
  extends Promise<AggregateEstado>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateEstadoSubscription
  extends Promise<AsyncIterator<AggregateEstado>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface MatrizConnection {
  pageInfo: PageInfo;
  edges: MatrizEdge[];
}

export interface MatrizConnectionPromise
  extends Promise<MatrizConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MatrizEdge>>() => T;
  aggregate: <T = AggregateMatrizPromise>() => T;
}

export interface MatrizConnectionSubscription
  extends Promise<AsyncIterator<MatrizConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MatrizEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMatrizSubscription>() => T;
}

export interface MatrizEdge {
  node: Matriz;
  cursor: String;
}

export interface MatrizEdgePromise extends Promise<MatrizEdge>, Fragmentable {
  node: <T = MatrizPromise>() => T;
  cursor: () => Promise<String>;
}

export interface MatrizEdgeSubscription
  extends Promise<AsyncIterator<MatrizEdge>>,
    Fragmentable {
  node: <T = MatrizSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateMatriz {
  count: Int;
}

export interface AggregateMatrizPromise
  extends Promise<AggregateMatriz>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMatrizSubscription
  extends Promise<AsyncIterator<AggregateMatriz>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TemaConnection {
  pageInfo: PageInfo;
  edges: TemaEdge[];
}

export interface TemaConnectionPromise
  extends Promise<TemaConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TemaEdge>>() => T;
  aggregate: <T = AggregateTemaPromise>() => T;
}

export interface TemaConnectionSubscription
  extends Promise<AsyncIterator<TemaConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TemaEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTemaSubscription>() => T;
}

export interface TemaEdge {
  node: Tema;
  cursor: String;
}

export interface TemaEdgePromise extends Promise<TemaEdge>, Fragmentable {
  node: <T = TemaPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TemaEdgeSubscription
  extends Promise<AsyncIterator<TemaEdge>>,
    Fragmentable {
  node: <T = TemaSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTema {
  count: Int;
}

export interface AggregateTemaPromise
  extends Promise<AggregateTema>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTemaSubscription
  extends Promise<AsyncIterator<AggregateTema>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface ActorSubscriptionPayload {
  mutation: MutationType;
  node: Actor;
  updatedFields: String[];
  previousValues: ActorPreviousValues;
}

export interface ActorSubscriptionPayloadPromise
  extends Promise<ActorSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ActorPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ActorPreviousValuesPromise>() => T;
}

export interface ActorSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ActorSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ActorSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ActorPreviousValuesSubscription>() => T;
}

export interface ActorPreviousValues {
  id: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
  prioridad?: Int;
  coments?: String;
  parent?: Boolean;
}

export interface ActorPreviousValuesPromise
  extends Promise<ActorPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  prioridad: () => Promise<Int>;
  coments: () => Promise<String>;
  parent: () => Promise<Boolean>;
}

export interface ActorPreviousValuesSubscription
  extends Promise<AsyncIterator<ActorPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  prioridad: () => Promise<AsyncIterator<Int>>;
  coments: () => Promise<AsyncIterator<String>>;
  parent: () => Promise<AsyncIterator<Boolean>>;
}

export interface CeldaSubscriptionPayload {
  mutation: MutationType;
  node: Celda;
  updatedFields: String[];
  previousValues: CeldaPreviousValues;
}

export interface CeldaSubscriptionPayloadPromise
  extends Promise<CeldaSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CeldaPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CeldaPreviousValuesPromise>() => T;
}

export interface CeldaSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CeldaSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CeldaSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CeldaPreviousValuesSubscription>() => T;
}

export interface CeldaPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  prioridad?: Int;
  tiempo?: Int;
  coment?: String;
}

export interface CeldaPreviousValuesPromise
  extends Promise<CeldaPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  prioridad: () => Promise<Int>;
  tiempo: () => Promise<Int>;
  coment: () => Promise<String>;
}

export interface CeldaPreviousValuesSubscription
  extends Promise<AsyncIterator<CeldaPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  prioridad: () => Promise<AsyncIterator<Int>>;
  tiempo: () => Promise<AsyncIterator<Int>>;
  coment: () => Promise<AsyncIterator<String>>;
}

export interface EstadoSubscriptionPayload {
  mutation: MutationType;
  node: Estado;
  updatedFields: String[];
  previousValues: EstadoPreviousValues;
}

export interface EstadoSubscriptionPayloadPromise
  extends Promise<EstadoSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = EstadoPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = EstadoPreviousValuesPromise>() => T;
}

export interface EstadoSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<EstadoSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = EstadoSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = EstadoPreviousValuesSubscription>() => T;
}

export interface EstadoPreviousValues {
  id: ID_Output;
  NumActor: Int;
  NumTemas: Int;
}

export interface EstadoPreviousValuesPromise
  extends Promise<EstadoPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  NumActor: () => Promise<Int>;
  NumTemas: () => Promise<Int>;
}

export interface EstadoPreviousValuesSubscription
  extends Promise<AsyncIterator<EstadoPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  NumActor: () => Promise<AsyncIterator<Int>>;
  NumTemas: () => Promise<AsyncIterator<Int>>;
}

export interface MatrizSubscriptionPayload {
  mutation: MutationType;
  node: Matriz;
  updatedFields: String[];
  previousValues: MatrizPreviousValues;
}

export interface MatrizSubscriptionPayloadPromise
  extends Promise<MatrizSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MatrizPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MatrizPreviousValuesPromise>() => T;
}

export interface MatrizSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MatrizSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MatrizSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MatrizPreviousValuesSubscription>() => T;
}

export interface MatrizPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface MatrizPreviousValuesPromise
  extends Promise<MatrizPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface MatrizPreviousValuesSubscription
  extends Promise<AsyncIterator<MatrizPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface TemaSubscriptionPayload {
  mutation: MutationType;
  node: Tema;
  updatedFields: String[];
  previousValues: TemaPreviousValues;
}

export interface TemaSubscriptionPayloadPromise
  extends Promise<TemaSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TemaPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TemaPreviousValuesPromise>() => T;
}

export interface TemaSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TemaSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TemaSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TemaPreviousValuesSubscription>() => T;
}

export interface TemaPreviousValues {
  id: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
  prioridad?: Int;
  coments?: String;
  parent?: Boolean;
}

export interface TemaPreviousValuesPromise
  extends Promise<TemaPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  prioridad: () => Promise<Int>;
  coments: () => Promise<String>;
  parent: () => Promise<Boolean>;
}

export interface TemaPreviousValuesSubscription
  extends Promise<AsyncIterator<TemaPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  prioridad: () => Promise<AsyncIterator<Int>>;
  coments: () => Promise<AsyncIterator<String>>;
  parent: () => Promise<AsyncIterator<Boolean>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Actor",
    embedded: false
  },
  {
    name: "Tema",
    embedded: false
  },
  {
    name: "Celda",
    embedded: false
  },
  {
    name: "Estado",
    embedded: false
  },
  {
    name: "Matriz",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
