// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  actor: (where?: ActorWhereInput) => Promise<boolean>;
  link: (where?: LinkWhereInput) => Promise<boolean>;
  tema: (where?: TemaWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  actor: (where: ActorWhereUniqueInput) => ActorNullablePromise;
  actors: (args?: {
    where?: ActorWhereInput;
    orderBy?: ActorOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Actor>;
  actorsConnection: (args?: {
    where?: ActorWhereInput;
    orderBy?: ActorOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ActorConnectionPromise;
  link: (where: LinkWhereUniqueInput) => LinkNullablePromise;
  links: (args?: {
    where?: LinkWhereInput;
    orderBy?: LinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Link>;
  linksConnection: (args?: {
    where?: LinkWhereInput;
    orderBy?: LinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => LinkConnectionPromise;
  tema: (where: TemaWhereUniqueInput) => TemaNullablePromise;
  temas: (args?: {
    where?: TemaWhereInput;
    orderBy?: TemaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Tema>;
  temasConnection: (args?: {
    where?: TemaWhereInput;
    orderBy?: TemaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TemaConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createActor: (data: ActorCreateInput) => ActorPromise;
  updateActor: (args: {
    data: ActorUpdateInput;
    where: ActorWhereUniqueInput;
  }) => ActorPromise;
  updateManyActors: (args: {
    data: ActorUpdateManyMutationInput;
    where?: ActorWhereInput;
  }) => BatchPayloadPromise;
  upsertActor: (args: {
    where: ActorWhereUniqueInput;
    create: ActorCreateInput;
    update: ActorUpdateInput;
  }) => ActorPromise;
  deleteActor: (where: ActorWhereUniqueInput) => ActorPromise;
  deleteManyActors: (where?: ActorWhereInput) => BatchPayloadPromise;
  createLink: (data: LinkCreateInput) => LinkPromise;
  updateLink: (args: {
    data: LinkUpdateInput;
    where: LinkWhereUniqueInput;
  }) => LinkPromise;
  updateManyLinks: (args: {
    data: LinkUpdateManyMutationInput;
    where?: LinkWhereInput;
  }) => BatchPayloadPromise;
  upsertLink: (args: {
    where: LinkWhereUniqueInput;
    create: LinkCreateInput;
    update: LinkUpdateInput;
  }) => LinkPromise;
  deleteLink: (where: LinkWhereUniqueInput) => LinkPromise;
  deleteManyLinks: (where?: LinkWhereInput) => BatchPayloadPromise;
  createTema: (data: TemaCreateInput) => TemaPromise;
  updateTema: (args: {
    data: TemaUpdateInput;
    where: TemaWhereUniqueInput;
  }) => TemaPromise;
  updateManyTemas: (args: {
    data: TemaUpdateManyMutationInput;
    where?: TemaWhereInput;
  }) => BatchPayloadPromise;
  upsertTema: (args: {
    where: TemaWhereUniqueInput;
    create: TemaCreateInput;
    update: TemaUpdateInput;
  }) => TemaPromise;
  deleteTema: (where: TemaWhereUniqueInput) => TemaPromise;
  deleteManyTemas: (where?: TemaWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  actor: (
    where?: ActorSubscriptionWhereInput
  ) => ActorSubscriptionPayloadSubscription;
  link: (
    where?: LinkSubscriptionWhereInput
  ) => LinkSubscriptionPayloadSubscription;
  tema: (
    where?: TemaSubscriptionWhereInput
  ) => TemaSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ActorOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "name_ASC"
  | "name_DESC"
  | "prioridad_ASC"
  | "prioridad_DESC"
  | "coments_ASC"
  | "coments_DESC";

export type LinkOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "description_ASC"
  | "description_DESC"
  | "url_ASC"
  | "url_DESC";

export type TemaOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "name_ASC"
  | "name_DESC"
  | "prioridad_ASC"
  | "prioridad_DESC"
  | "coments_ASC"
  | "coments_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface ActorCreateInput {
  name: String;
  prioridad?: Maybe<Int>;
  coments?: Maybe<String>;
  parent?: Maybe<ActorCreateOneInput>;
}

export type ActorWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface ActorUpdateOneInput {
  create?: Maybe<ActorCreateInput>;
  update?: Maybe<ActorUpdateDataInput>;
  upsert?: Maybe<ActorUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ActorWhereUniqueInput>;
}

export interface ActorWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  prioridad?: Maybe<Int>;
  prioridad_not?: Maybe<Int>;
  prioridad_in?: Maybe<Int[] | Int>;
  prioridad_not_in?: Maybe<Int[] | Int>;
  prioridad_lt?: Maybe<Int>;
  prioridad_lte?: Maybe<Int>;
  prioridad_gt?: Maybe<Int>;
  prioridad_gte?: Maybe<Int>;
  coments?: Maybe<String>;
  coments_not?: Maybe<String>;
  coments_in?: Maybe<String[] | String>;
  coments_not_in?: Maybe<String[] | String>;
  coments_lt?: Maybe<String>;
  coments_lte?: Maybe<String>;
  coments_gt?: Maybe<String>;
  coments_gte?: Maybe<String>;
  coments_contains?: Maybe<String>;
  coments_not_contains?: Maybe<String>;
  coments_starts_with?: Maybe<String>;
  coments_not_starts_with?: Maybe<String>;
  coments_ends_with?: Maybe<String>;
  coments_not_ends_with?: Maybe<String>;
  parent?: Maybe<ActorWhereInput>;
  AND?: Maybe<ActorWhereInput[] | ActorWhereInput>;
  OR?: Maybe<ActorWhereInput[] | ActorWhereInput>;
  NOT?: Maybe<ActorWhereInput[] | ActorWhereInput>;
}

export type TemaWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface ActorUpsertNestedInput {
  update: ActorUpdateDataInput;
  create: ActorCreateInput;
}

export interface TemaCreateOneInput {
  create?: Maybe<TemaCreateInput>;
  connect?: Maybe<TemaWhereUniqueInput>;
}

export interface ActorUpdateDataInput {
  name?: Maybe<String>;
  prioridad?: Maybe<Int>;
  coments?: Maybe<String>;
  parent?: Maybe<ActorUpdateOneInput>;
}

export interface TemaWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  prioridad?: Maybe<Int>;
  prioridad_not?: Maybe<Int>;
  prioridad_in?: Maybe<Int[] | Int>;
  prioridad_not_in?: Maybe<Int[] | Int>;
  prioridad_lt?: Maybe<Int>;
  prioridad_lte?: Maybe<Int>;
  prioridad_gt?: Maybe<Int>;
  prioridad_gte?: Maybe<Int>;
  coments?: Maybe<String>;
  coments_not?: Maybe<String>;
  coments_in?: Maybe<String[] | String>;
  coments_not_in?: Maybe<String[] | String>;
  coments_lt?: Maybe<String>;
  coments_lte?: Maybe<String>;
  coments_gt?: Maybe<String>;
  coments_gte?: Maybe<String>;
  coments_contains?: Maybe<String>;
  coments_not_contains?: Maybe<String>;
  coments_starts_with?: Maybe<String>;
  coments_not_starts_with?: Maybe<String>;
  coments_ends_with?: Maybe<String>;
  coments_not_ends_with?: Maybe<String>;
  parent?: Maybe<TemaWhereInput>;
  AND?: Maybe<TemaWhereInput[] | TemaWhereInput>;
  OR?: Maybe<TemaWhereInput[] | TemaWhereInput>;
  NOT?: Maybe<TemaWhereInput[] | TemaWhereInput>;
}

export interface LinkSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<LinkWhereInput>;
  AND?: Maybe<LinkSubscriptionWhereInput[] | LinkSubscriptionWhereInput>;
  OR?: Maybe<LinkSubscriptionWhereInput[] | LinkSubscriptionWhereInput>;
  NOT?: Maybe<LinkSubscriptionWhereInput[] | LinkSubscriptionWhereInput>;
}

export interface TemaCreateInput {
  name: String;
  prioridad?: Maybe<Int>;
  coments?: Maybe<String>;
  parent?: Maybe<TemaCreateOneInput>;
}

export interface ActorSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ActorWhereInput>;
  AND?: Maybe<ActorSubscriptionWhereInput[] | ActorSubscriptionWhereInput>;
  OR?: Maybe<ActorSubscriptionWhereInput[] | ActorSubscriptionWhereInput>;
  NOT?: Maybe<ActorSubscriptionWhereInput[] | ActorSubscriptionWhereInput>;
}

export interface LinkUpdateManyMutationInput {
  description?: Maybe<String>;
  url?: Maybe<String>;
}

export interface LinkWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  AND?: Maybe<LinkWhereInput[] | LinkWhereInput>;
  OR?: Maybe<LinkWhereInput[] | LinkWhereInput>;
  NOT?: Maybe<LinkWhereInput[] | LinkWhereInput>;
}

export interface LinkUpdateInput {
  description?: Maybe<String>;
  url?: Maybe<String>;
}

export interface TemaUpdateDataInput {
  name?: Maybe<String>;
  prioridad?: Maybe<Int>;
  coments?: Maybe<String>;
  parent?: Maybe<TemaUpdateOneInput>;
}

export interface LinkCreateInput {
  id?: Maybe<ID_Input>;
  description: String;
  url: String;
}

export interface TemaUpdateInput {
  name?: Maybe<String>;
  prioridad?: Maybe<Int>;
  coments?: Maybe<String>;
  parent?: Maybe<TemaUpdateOneInput>;
}

export type LinkWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ActorUpdateInput {
  name?: Maybe<String>;
  prioridad?: Maybe<Int>;
  coments?: Maybe<String>;
  parent?: Maybe<ActorUpdateOneInput>;
}

export interface ActorCreateOneInput {
  create?: Maybe<ActorCreateInput>;
  connect?: Maybe<ActorWhereUniqueInput>;
}

export interface ActorUpdateManyMutationInput {
  name?: Maybe<String>;
  prioridad?: Maybe<Int>;
  coments?: Maybe<String>;
}

export interface TemaUpdateManyMutationInput {
  name?: Maybe<String>;
  prioridad?: Maybe<Int>;
  coments?: Maybe<String>;
}

export interface TemaSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<TemaWhereInput>;
  AND?: Maybe<TemaSubscriptionWhereInput[] | TemaSubscriptionWhereInput>;
  OR?: Maybe<TemaSubscriptionWhereInput[] | TemaSubscriptionWhereInput>;
  NOT?: Maybe<TemaSubscriptionWhereInput[] | TemaSubscriptionWhereInput>;
}

export interface TemaUpdateOneInput {
  create?: Maybe<TemaCreateInput>;
  update?: Maybe<TemaUpdateDataInput>;
  upsert?: Maybe<TemaUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<TemaWhereUniqueInput>;
}

export interface TemaUpsertNestedInput {
  update: TemaUpdateDataInput;
  create: TemaCreateInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface TemaPreviousValues {
  id: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
  prioridad?: Int;
  coments?: String;
}

export interface TemaPreviousValuesPromise
  extends Promise<TemaPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  prioridad: () => Promise<Int>;
  coments: () => Promise<String>;
}

export interface TemaPreviousValuesSubscription
  extends Promise<AsyncIterator<TemaPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  prioridad: () => Promise<AsyncIterator<Int>>;
  coments: () => Promise<AsyncIterator<String>>;
}

export interface LinkConnection {
  pageInfo: PageInfo;
  edges: LinkEdge[];
}

export interface LinkConnectionPromise
  extends Promise<LinkConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<LinkEdge>>() => T;
  aggregate: <T = AggregateLinkPromise>() => T;
}

export interface LinkConnectionSubscription
  extends Promise<AsyncIterator<LinkConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<LinkEdgeSubscription>>>() => T;
  aggregate: <T = AggregateLinkSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ActorConnection {
  pageInfo: PageInfo;
  edges: ActorEdge[];
}

export interface ActorConnectionPromise
  extends Promise<ActorConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ActorEdge>>() => T;
  aggregate: <T = AggregateActorPromise>() => T;
}

export interface ActorConnectionSubscription
  extends Promise<AsyncIterator<ActorConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ActorEdgeSubscription>>>() => T;
  aggregate: <T = AggregateActorSubscription>() => T;
}

export interface LinkSubscriptionPayload {
  mutation: MutationType;
  node: Link;
  updatedFields: String[];
  previousValues: LinkPreviousValues;
}

export interface LinkSubscriptionPayloadPromise
  extends Promise<LinkSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = LinkPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = LinkPreviousValuesPromise>() => T;
}

export interface LinkSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<LinkSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = LinkSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = LinkPreviousValuesSubscription>() => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AggregateTema {
  count: Int;
}

export interface AggregateTemaPromise
  extends Promise<AggregateTema>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTemaSubscription
  extends Promise<AsyncIterator<AggregateTema>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Link {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  description: String;
  url: String;
}

export interface LinkPromise extends Promise<Link>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  description: () => Promise<String>;
  url: () => Promise<String>;
}

export interface LinkSubscription
  extends Promise<AsyncIterator<Link>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  description: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
}

export interface LinkNullablePromise
  extends Promise<Link | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  description: () => Promise<String>;
  url: () => Promise<String>;
}

export interface TemaConnection {
  pageInfo: PageInfo;
  edges: TemaEdge[];
}

export interface TemaConnectionPromise
  extends Promise<TemaConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TemaEdge>>() => T;
  aggregate: <T = AggregateTemaPromise>() => T;
}

export interface TemaConnectionSubscription
  extends Promise<AsyncIterator<TemaConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TemaEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTemaSubscription>() => T;
}

export interface LinkPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  description: String;
  url: String;
}

export interface LinkPreviousValuesPromise
  extends Promise<LinkPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  description: () => Promise<String>;
  url: () => Promise<String>;
}

export interface LinkPreviousValuesSubscription
  extends Promise<AsyncIterator<LinkPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  description: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
}

export interface Tema {
  id: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
  prioridad?: Int;
  coments?: String;
}

export interface TemaPromise extends Promise<Tema>, Fragmentable {
  id: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  prioridad: () => Promise<Int>;
  coments: () => Promise<String>;
  parent: <T = TemaPromise>() => T;
}

export interface TemaSubscription
  extends Promise<AsyncIterator<Tema>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  prioridad: () => Promise<AsyncIterator<Int>>;
  coments: () => Promise<AsyncIterator<String>>;
  parent: <T = TemaSubscription>() => T;
}

export interface TemaNullablePromise
  extends Promise<Tema | null>,
    Fragmentable {
  id: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  prioridad: () => Promise<Int>;
  coments: () => Promise<String>;
  parent: <T = TemaPromise>() => T;
}

export interface AggregateActor {
  count: Int;
}

export interface AggregateActorPromise
  extends Promise<AggregateActor>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateActorSubscription
  extends Promise<AsyncIterator<AggregateActor>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ActorPreviousValues {
  id: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
  prioridad?: Int;
  coments?: String;
}

export interface ActorPreviousValuesPromise
  extends Promise<ActorPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  prioridad: () => Promise<Int>;
  coments: () => Promise<String>;
}

export interface ActorPreviousValuesSubscription
  extends Promise<AsyncIterator<ActorPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  prioridad: () => Promise<AsyncIterator<Int>>;
  coments: () => Promise<AsyncIterator<String>>;
}

export interface ActorSubscriptionPayload {
  mutation: MutationType;
  node: Actor;
  updatedFields: String[];
  previousValues: ActorPreviousValues;
}

export interface ActorSubscriptionPayloadPromise
  extends Promise<ActorSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ActorPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ActorPreviousValuesPromise>() => T;
}

export interface ActorSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ActorSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ActorSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ActorPreviousValuesSubscription>() => T;
}

export interface Actor {
  id: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
  prioridad?: Int;
  coments?: String;
}

export interface ActorPromise extends Promise<Actor>, Fragmentable {
  id: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  prioridad: () => Promise<Int>;
  coments: () => Promise<String>;
  parent: <T = ActorPromise>() => T;
}

export interface ActorSubscription
  extends Promise<AsyncIterator<Actor>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  prioridad: () => Promise<AsyncIterator<Int>>;
  coments: () => Promise<AsyncIterator<String>>;
  parent: <T = ActorSubscription>() => T;
}

export interface ActorNullablePromise
  extends Promise<Actor | null>,
    Fragmentable {
  id: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  prioridad: () => Promise<Int>;
  coments: () => Promise<String>;
  parent: <T = ActorPromise>() => T;
}

export interface AggregateLink {
  count: Int;
}

export interface AggregateLinkPromise
  extends Promise<AggregateLink>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateLinkSubscription
  extends Promise<AsyncIterator<AggregateLink>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ActorEdge {
  node: Actor;
  cursor: String;
}

export interface ActorEdgePromise extends Promise<ActorEdge>, Fragmentable {
  node: <T = ActorPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ActorEdgeSubscription
  extends Promise<AsyncIterator<ActorEdge>>,
    Fragmentable {
  node: <T = ActorSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface TemaEdge {
  node: Tema;
  cursor: String;
}

export interface TemaEdgePromise extends Promise<TemaEdge>, Fragmentable {
  node: <T = TemaPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TemaEdgeSubscription
  extends Promise<AsyncIterator<TemaEdge>>,
    Fragmentable {
  node: <T = TemaSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface TemaSubscriptionPayload {
  mutation: MutationType;
  node: Tema;
  updatedFields: String[];
  previousValues: TemaPreviousValues;
}

export interface TemaSubscriptionPayloadPromise
  extends Promise<TemaSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TemaPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TemaPreviousValuesPromise>() => T;
}

export interface TemaSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TemaSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TemaSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TemaPreviousValuesSubscription>() => T;
}

export interface LinkEdge {
  node: Link;
  cursor: String;
}

export interface LinkEdgePromise extends Promise<LinkEdge>, Fragmentable {
  node: <T = LinkPromise>() => T;
  cursor: () => Promise<String>;
}

export interface LinkEdgeSubscription
  extends Promise<AsyncIterator<LinkEdge>>,
    Fragmentable {
  node: <T = LinkSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

export type Long = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Actor",
    embedded: false
  },
  {
    name: "Tema",
    embedded: false
  },
  {
    name: "Link",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
